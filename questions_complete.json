[
    {
        "pregunta": "¿Cuál de las siguientes es una propiedad esencial de un software seguro?",
        "respuestas": [
            "a) Rendimiento mejorado en entornos virtuales.",
            "b) Compatibilidad con todos los sistemas operativos.",
            "c) Confidencialidad, integridad y disponibilidad.",
            "d) Capacidad de escalar horizontalmente sin restricciones."
        ],
        "respuesta_correcta": "c) Confidencialidad, integridad y disponibilidad.",
        "explicacion": "Estas son propiedades fundamentales que garantizan que el software sea confiable, protegiendo la información frente a accesos no autorizados, modificaciones no intencionadas y asegurando su disponibilidad​(tema 1)."
    },
    {
        "pregunta": "¿Qué define la estrategia de defensa en profundidad en el diseño de software seguro?",
        "respuestas": [
            "a) Implementar una única capa de seguridad para simplificar el sistema.",
            "b) Introducir múltiples capas de seguridad para reducir el riesgo de compromisos.",
            "c) Usar solo mecanismos de seguridad en la capa de red.",
            "d) Prohibir la comunicación entre componentes internos del sistema."
        ],
        "respuesta_correcta": "b) Introducir múltiples capas de seguridad para reducir el riesgo de compromisos.",
        "explicacion": "La defensa en profundidad asegura que si una capa de seguridad falla, otras capas minimicen el impacto, protegiendo el software de ataques complejos​(tema 2)."
    },
    {
        "pregunta": "¿Cuál es la principal ventaja de integrar seguridad en las primeras fases del ciclo de vida del software?",
        "respuestas": [
            "a) Permite reducir el tiempo total de desarrollo del software.",
            "b) Minimiza el impacto de los ataques físicos al hardware.",
            "c) Reduce los costes de corrección de errores en etapas posteriores.",
            "d) Garantiza que el software funcione en todos los sistemas operativos."
        ],
        "respuesta_correcta": "c) Reduce los costes de corrección de errores en etapas posteriores.",
        "explicacion": "Identificar y corregir problemas de seguridad en etapas tempranas del SDLC resulta menos costoso que hacerlo durante la operación del software​(tema 1)."
    },
    {
        "pregunta": "¿Qué principio de diseño fomenta que los usuarios, procesos o dispositivos solo tengan los permisos estrictamente necesarios?",
        "respuestas": [
            "a) Simplicidad del diseño.",
            "b) Mínimo privilegio.",
            "c) Separación de dominios.",
            "d) Registro de eventos de seguridad."
        ],
        "respuesta_correcta": "b) Mínimo privilegio.",
        "explicacion": "Este principio busca minimizar los riesgos al restringir los privilegios a lo absolutamente necesario para realizar una tarea​(tema 2)."
    },
    {
        "pregunta": "¿Qué describe mejor un caso de abuso en la ingeniería de requisitos de software?",
        "respuestas": [
            "a) Una función adicional que mejora la seguridad del software.",
            "b) Un evento que genera un impacto positivo en la organización.",
            "c) Una función que el sistema no debe permitir para evitar pérdidas.",
            "d) Un requisito funcional de alto impacto en la experiencia del usuario."
        ],
        "respuesta_correcta": "c) Una función que el sistema no debe permitir para evitar pérdidas.",
        "explicacion": "Los casos de abuso se utilizan para identificar amenazas y diseñar restricciones que eviten el mal uso del sistema​(tema 3)."
    },
    {
        "pregunta": "¿Cuál es el objetivo del análisis estático de código (SAST)?",
        "respuestas": [
            "a) Detectar vulnerabilidades al ejecutar el software en un entorno controlado.",
            "b) Identificar vulnerabilidades en el código fuente antes de que el software sea ejecutado.",
            "c) Mejorar la velocidad del software eliminando redundancias.",
            "d) Crear análisis dinámicos para identificar problemas en tiempo de ejecución."
        ],
        "respuesta_correcta": "b) Identificar vulnerabilidades en el código fuente antes de que el software sea ejecutado.",
        "explicacion": "El análisis estático permite detectar problemas en fases tempranas del desarrollo, mejorando la seguridad y reduciendo costos​(tema 5)."
    },
    {
        "pregunta": "¿Qué herramienta es clave para evaluar amenazas durante la fase de diseño de software seguro?",
        "respuestas": [
            "a) OWASP Top 10.",
            "b) Modelado de amenazas.",
            "c) Pruebas de penetración.",
            "d) Gestión de la cadena de suministro."
        ],
        "respuesta_correcta": "b) Modelado de amenazas.",
        "explicacion": "El modelado de amenazas identifica riesgos potenciales y planifica contramedidas durante la fase de diseño, siendo esencial para el S-SDLC​(tema 4)."
    },
    {
        "pregunta": "¿Qué técnica ayuda a prevenir la manipulación de datos en aplicaciones web?",
        "respuestas": [
            "a) Separación de dominios.",
            "b) Validación de datos explícita.",
            "c) Registro de eventos de seguridad.",
            "d) Uso de entornos de ejecución inseguros."
        ],
        "respuesta_correcta": "b) Validación de datos explícita.",
        "explicacion": "Validar los datos explícitamente reduce la probabilidad de ataques como inyección de código o cross-site scripting​(tema 2)."
    },
    {
        "pregunta": "¿Qué describe el método STRIDE utilizado en seguridad de software?",
        "respuestas": [
            "a) Una clasificación de defectos de codificación.",
            "b) Un modelo para identificar y clasificar amenazas.",
            "c) Una técnica para cifrar datos sensibles.",
            "d) Un estándar para evaluar la criticidad de vulnerabilidades."
        ],
        "respuesta_correcta": "b) Un modelo para identificar y clasificar amenazas.",
        "explicacion": "STRIDE categoriza amenazas en suplantación, manipulación, repudio, divulgación de información, denegación de servicio y escalamiento de privilegios​(tema 4)."
    },
    {
        "pregunta": "¿Cuál es el propósito del análisis de composición del software (SCA)?",
        "respuestas": [
            "a) Identificar componentes de terceros y sus vulnerabilidades conocidas.",
            "b) Mejorar el rendimiento del software durante pruebas de carga.",
            "c) Clasificar errores semánticos en el código fuente.",
            "d) Probar el software en diferentes sistemas operativos."
        ],
        "respuesta_correcta": "a) Identificar componentes de terceros y sus vulnerabilidades conocidas.",
        "explicacion": "SCA evalúa los componentes utilizados en el software para garantizar que no contengan vulnerabilidades críticas​(tema 5)."
    },
    {
        "pregunta": "¿Cuál es el enfoque principal del modelado de ataques en la seguridad de software?",
        "respuestas": [
            "a) Probar componentes del software en un entorno seguro.",
            "b) Diseñar escenarios positivos que mejoren la funcionalidad del software.",
            "c) Identificar vulnerabilidades explotables y diseñar contramedidas.",
            "d) Garantizar que los usuarios finales comprendan las políticas de seguridad."
        ],
        "respuesta_correcta": "c) Identificar vulnerabilidades explotables y diseñar contramedidas.",
        "explicacion": "El modelado de ataques analiza la perspectiva del atacante para identificar posibles puntos de explotación y desarrollar respuestas defensivas efectivas​(tema 3)."
    },
    {
        "pregunta": "¿Qué propiedad del software seguro asegura que solo las entidades autorizadas puedan acceder a la información?",
        "respuestas": [
            "a) Disponibilidad.",
            "b) Confidencialidad.",
            "c) Integridad.",
            "d) Fiabilidad."
        ],
        "respuesta_correcta": "b) Confidencialidad.",
        "explicacion": "La confidencialidad garantiza que los datos estén protegidos frente a accesos no autorizados, manteniéndolos seguros y privados​(tema 1)."
    },
    {
        "pregunta": "¿Qué objetivo persigue la separación de dominios en el diseño seguro del software?",
        "respuestas": [
            "a) Permitir que las entidades interactúen libremente para maximizar la funcionalidad.",
            "b) Minimizar la probabilidad de acceso no autorizado a datos o memoria del sistema.",
            "c) Reducir el tamaño del software para mejorar el rendimiento.",
            "d) Unificar los privilegios de todos los usuarios en un solo dominio."
        ],
        "respuesta_correcta": "b) Minimizar la probabilidad de acceso no autorizado a datos o memoria del sistema.",
        "explicacion": "La separación de dominios aísla recursos críticos en áreas seguras, limitando el acceso a entidades confiables​(tema 2)."
    },
    {
        "pregunta": "¿Cuál de los siguientes es un beneficio clave de implementar un S-SDLC?",
        "respuestas": [
            "a) Aumentar el número de funcionalidades del software.",
            "b) Garantizar el cumplimiento exclusivo de estándares legales.",
            "c) Detectar errores de seguridad en etapas tempranas y reducir costos.",
            "d) Reducir el tiempo total de desarrollo del software."
        ],
        "respuesta_correcta": "c) Detectar errores de seguridad en etapas tempranas y reducir costos.",
        "explicacion": "Un S-SDLC permite identificar problemas desde las primeras etapas del ciclo de vida del software, reduciendo tanto riesgos como costos asociados​(tema 1)."
    },
    {
        "pregunta": "¿Qué vulnerabilidad podría resultar de no validar los datos de entrada del usuario?",
        "respuestas": [
            "a) Cross-site scripting (XSS).",
            "b) Desbordamiento de búfer.",
            "c) Inyección SQL.",
            "d) Todas las anteriores."
        ],
        "respuesta_correcta": "d) Todas las anteriores.",
        "explicacion": "La falta de validación de entradas puede llevar a vulnerabilidades graves como XSS, inyección SQL y desbordamientos de búfer​(tema 5)."
    },
    {
        "pregunta": "¿Qué principio de diseño se aplica cuando se limita el acceso a recursos basándose en roles?",
        "respuestas": [
            "a) Seguridad por defecto.",
            "b) Mínimo privilegio.",
            "c) Separación de privilegios.",
            "d) Diseño de software resistente."
        ],
        "respuesta_correcta": "c) Separación de privilegios.",
        "explicacion": "Este principio asegura que las entidades tengan acceso únicamente a los recursos necesarios para cumplir sus funciones específicas, basado en roles definidos​(tema 2)."
    },
    {
        "pregunta": "¿Por qué las herramientas SAST son críticas en la fase de codificación?",
        "respuestas": [
            "a) Evalúan el impacto de los ciberataques una vez el software está en producción.",
            "b) Detectan vulnerabilidades en el código fuente antes de que el software sea ejecutado.",
            "c) Analizan los requisitos de seguridad del software antes de su diseño.",
            "d) Ayudan a documentar los errores encontrados durante pruebas dinámicas."
        ],
        "respuesta_correcta": "b) Detectan vulnerabilidades en el código fuente antes de que el software sea ejecutado.",
        "explicacion": "Las herramientas SAST identifican errores de seguridad en etapas tempranas, mejorando la eficiencia del desarrollo seguro​(tema 5)."
    },
    {
        "pregunta": "¿Qué técnica se utiliza para analizar cómo los datos se mueven a través de un programa?",
        "respuestas": [
            "a) Análisis de flujo de datos.",
            "b) Modelado de ataques.",
            "c) Registro de eventos de seguridad.",
            "d) Separación de dominios."
        ],
        "respuesta_correcta": "a) Análisis de flujo de datos.",
        "explicacion": "El análisis de flujo de datos examina el recorrido de los datos para identificar posibles vulnerabilidades relacionadas con su manipulación y almacenamiento​(tema 5)."
    },
    {
        "pregunta": "¿Cuál es el propósito del método DREAD en el modelado de amenazas?",
        "respuestas": [
            "a) Clasificar vulnerabilidades conocidas en componentes de código abierto.",
            "b) Priorizar amenazas basándose en su probabilidad e impacto.",
            "c) Diseñar patrones de ataque para pruebas de seguridad.",
            "d) Implementar soluciones criptográficas en el software."
        ],
        "respuesta_correcta": "b) Priorizar amenazas basándose en su probabilidad e impacto.",
        "explicacion": "DREAD evalúa el impacto y la probabilidad de una amenaza para determinar las medidas necesarias para mitigarla​(tema 4)."
    },
    {
        "pregunta": "¿Qué técnica se utiliza para representar gráficamente las vulnerabilidades explotables de un sistema?",
        "respuestas": [
            "a) Modelado de amenazas.",
            "b) Árboles de ataque.",
            "c) Patrones de diseño.",
            "d) Análisis de flujo de control."
        ],
        "respuesta_correcta": "b) Árboles de ataque.",
        "explicacion": "Los árboles de ataque identifican objetivos potenciales y las rutas que un atacante podría seguir para alcanzarlos, ayudando a diseñar defensas efectivas​(tema 3)."
    },
    {
        "pregunta": "¿Cuál es el principal objetivo del análisis de riesgos arquitectónico?",
        "respuestas": [
            "a) Documentar todos los componentes del software para auditorías externas.",
            "b) Especificar los activos, amenazas y salvaguardas concretas del sistema.",
            "c) Aumentar la velocidad de desarrollo del software.",
            "d) Eliminar todos los defectos funcionales del código fuente."
        ],
        "respuesta_correcta": "b) Especificar los activos, amenazas y salvaguardas concretas del sistema.",
        "explicacion": "Este análisis identifica los activos y evalúa los riesgos asociados al diseño del software, definiendo salvaguardas específicas para mitigarlos​(tema 4)."
    },
    {
        "pregunta": "¿Qué vulnerabilidad puede ocurrir si un atacante logra manipular las entradas de datos?",
        "respuestas": [
            "a) Suplantación de identidad.",
            "b) Denegación de servicio.",
            "c) Inyección de código.",
            "d) Todas las anteriores."
        ],
        "respuesta_correcta": "d) Todas las anteriores.",
        "explicacion": "La manipulación de entradas puede derivar en diversas vulnerabilidades, como suplantación de identidad, inyección de código o denegación de servicio​(tema 5)."
    },
    {
        "pregunta": "¿Qué es STRIDE?",
        "respuestas": [
            "a) Un método para diseñar software resistente.",
            "b) Una técnica para clasificar amenazas de seguridad.",
            "c) Un estándar para verificar la seguridad del código.",
            "d) Una metodología para evaluar riesgos financieros."
        ],
        "respuesta_correcta": "b) Una técnica para clasificar amenazas de seguridad.",
        "explicacion": "STRIDE categoriza amenazas en suplantación, manipulación, repudio, divulgación de información, denegación de servicio y escalamiento de privilegios​(tema 4)."
    },
    {
        "pregunta": "¿Cuál es la función principal de los patrones de ataque?",
        "respuestas": [
            "a) Mejorar la usabilidad del software para usuarios finales.",
            "b) Identificar técnicas comunes utilizadas por los atacantes.",
            "c) Clasificar datos sensibles según su importancia.",
            "d) Diseñar algoritmos de encriptación avanzados."
        ],
        "respuesta_correcta": "b) Identificar técnicas comunes utilizadas por los atacantes.",
        "explicacion": "Los patrones de ataque ayudan a capturar el conocimiento del atacante, proporcionando una base para mitigar las vulnerabilidades​(tema 3)."
    },
    {
        "pregunta": "¿Qué característica define a un software seguro?",
        "respuestas": [
            "a) Carece de cualquier funcionalidad no documentada.",
            "b) Está protegido contra vulnerabilidades intencionales y no intencionales.",
            "c) Funciona exclusivamente en entornos controlados.",
            "d) No requiere mantenimiento tras su implementación."
        ],
        "respuesta_correcta": "b) Está protegido contra vulnerabilidades intencionales y no intencionales.",
        "explicacion": "El software seguro asegura su confiabilidad al prevenir y mitigar vulnerabilidades durante todo su ciclo de vida​(tema 1)."
    },
    {
        "pregunta": "¿Cuál de las siguientes es una debilidad común en el diseño de software?",
        "respuestas": [
            "a) Uso de interfaces gráficas avanzadas.",
            "b) Dependencia de configuraciones por defecto inseguras.",
            "c) Inclusión de múltiples capas de seguridad.",
            "d) Implementación de pruebas dinámicas en etapas tempranas."
        ],
        "respuesta_correcta": "b) Dependencia de configuraciones por defecto inseguras.",
        "explicacion": "Las configuraciones por defecto suelen ser inseguras y pueden permitir a los atacantes explotar fácilmente el software​(tema 1)."
    },
    {
        "pregunta": "¿Por qué es importante realizar la descomposición de la aplicación en el modelado de amenazas?",
        "respuestas": [
            "a) Para reducir la cantidad de código utilizado en el proyecto.",
            "b) Para identificar puntos vulnerables como flujos de datos y entidades externas.",
            "c) Para eliminar requisitos de seguridad redundantes.",
            "d) Para simplificar el diseño gráfico de la aplicación."
        ],
        "respuesta_correcta": "b) Para identificar puntos vulnerables como flujos de datos y entidades externas.",
        "explicacion": "La descomposición permite mapear elementos clave de la aplicación, identificando puntos susceptibles a amenazas​(tema 4)."
    },
    {
        "pregunta": "¿Qué ventaja proporciona la simplicidad del diseño en la seguridad del software?",
        "respuestas": [
            "a) Incrementa la velocidad de desarrollo.",
            "b) Reduce la probabilidad de introducir vulnerabilidades.",
            "c) Facilita la implementación de funcionalidades adicionales.",
            "d) Permite el acceso universal a los datos del sistema."
        ],
        "respuesta_correcta": "b) Reduce la probabilidad de introducir vulnerabilidades.",
        "explicacion": "Diseños simples disminuyen los errores de programación y debilidades, mejorando la seguridad del software​(tema 2)."
    },
    {
        "pregunta": "¿Qué técnica del análisis estático ayuda a identificar desbordamientos de búfer?",
        "respuestas": [
            "a) Validación de entradas.",
            "b) Análisis estructural.",
            "c) Análisis de flujo de datos.",
            "d) Propagación de taint."
        ],
        "respuesta_correcta": "d) Propagación de taint.",
        "explicacion": "Esta técnica rastrea cómo las entradas no confiables se propagan a través del programa, detectando defectos como desbordamientos de búfer​(tema 5)."
    },
    {
        "pregunta": "¿Qué representa un árbol de ataque en la seguridad del software?",
        "respuestas": [
            "a) Una lista de requisitos de diseño no funcionales.",
            "b) Una representación gráfica de las rutas de ataque posibles.",
            "c) Un registro de eventos de seguridad en tiempo real.",
            "d) Un esquema de capas de seguridad dentro del software."
        ],
        "respuesta_correcta": "b) Una representación gráfica de las rutas de ataque posibles.",
        "explicacion": "Los árboles de ataque ilustran gráficamente los caminos que un atacante podría seguir para comprometer un sistema​(tema 3)."
    },
    {
        "pregunta": "¿Qué propiedad del software seguro garantiza que los datos y configuraciones no puedan ser alterados por actores no autorizados?",
        "respuestas": [
            "a) Fiabilidad.",
            "b) Integridad.",
            "c) Confidencialidad.",
            "d) Disponibilidad."
        ],
        "respuesta_correcta": "b) Integridad.",
        "explicacion": "La integridad asegura que los datos, configuraciones y el comportamiento del software se mantengan inalterados por personas o procesos no autorizados​(tema 1)."
    },
    {
        "pregunta": "¿Cuál de las siguientes es una ventaja de utilizar el principio de separación de código y datos de configuración?",
        "respuestas": [
            "a) Mejora el rendimiento general del sistema.",
            "b) Facilita la manipulación de datos en tiempo de ejecución.",
            "c) Reduce la probabilidad de acceso no autorizado y manipulación.",
            "d) Aumenta la compatibilidad del software con hardware antiguo."
        ],
        "respuesta_correcta": "c) Reduce la probabilidad de acceso no autorizado y manipulación.",
        "explicacion": "Separar el código, los datos de configuración y los ejecutables limita el acceso y minimiza el riesgo de comprometer el sistema​(tema 2)."
    },
    {
        "pregunta": "¿Qué asegura el principio de seguridad por defecto en el diseño de software?",
        "respuestas": [
            "a) Todas las configuraciones iniciales permiten el acceso total al sistema.",
            "b) Las funcionalidades críticas están deshabilitadas hasta que sean configuradas manualmente.",
            "c) El sistema utiliza únicamente bibliotecas de código abierto.",
            "d) El código es diseñado para maximizar el rendimiento en lugar de la seguridad."
        ],
        "respuesta_correcta": "b) Las funcionalidades críticas están deshabilitadas hasta que sean configuradas manualmente.",
        "explicacion": "La seguridad por defecto limita los riesgos iniciales al asegurar que las configuraciones base sean seguras​(tema 2)."
    },
    {
        "pregunta": "¿Qué elemento es fundamental para identificar y priorizar las amenazas en el modelado de amenazas?",
        "respuestas": [
            "a) Pruebas de penetración.",
            "b) Documentación de diseño del software.",
            "c) Diagramas de flujo de datos (DFD).",
            "d) Métricas de rendimiento del sistema."
        ],
        "respuesta_correcta": "c) Diagramas de flujo de datos (DFD).",
        "explicacion": "Los DFD permiten mapear el movimiento de los datos a través de la aplicación, identificando posibles puntos de vulnerabilidad​(tema 4)."
    },
    {
        "pregunta": "¿Cuál es la principal función de las herramientas de análisis de composición de software (SCA)?",
        "respuestas": [
            "a) Optimizar la eficiencia del software mediante pruebas dinámicas.",
            "b) Identificar componentes de terceros y sus vulnerabilidades conocidas.",
            "c) Diseñar algoritmos para encriptar datos confidenciales.",
            "d) Validar las métricas de rendimiento del código fuente."
        ],
        "respuesta_correcta": "b) Identificar componentes de terceros y sus vulnerabilidades conocidas.",
        "explicacion": "Las herramientas SCA analizan componentes de código abierto o terceros para detectar vulnerabilidades conocidas antes de la implementación​(tema 5)."
    },
    {
        "pregunta": "¿Qué objetivo busca la técnica de registro de eventos de seguridad en un sistema?",
        "respuestas": [
            "a) Incrementar el rendimiento del sistema.",
            "b) Identificar y documentar actividades sospechosas.",
            "c) Evitar el acceso de usuarios autorizados.",
            "d) Reducir el tamaño de los archivos de configuración."
        ],
        "respuesta_correcta": "b) Identificar y documentar actividades sospechosas.",
        "explicacion": "El registro de eventos de seguridad proporciona una auditoría de las actividades del sistema, facilitando la identificación de posibles intrusiones o fallos​(tema 2)."
    },
    {
        "pregunta": "¿Qué caracteriza un diseño de software resistente?",
        "respuestas": [
            "a) Puede continuar funcionando bajo condiciones adversas o ataques.",
            "b) Utiliza exclusivamente bibliotecas de código propietario.",
            "c) Carece de mecanismos de autenticación para simplificar el acceso.",
            "d) Solo funciona en entornos completamente controlados."
        ],
        "respuesta_correcta": "a) Puede continuar funcionando bajo condiciones adversas o ataques.",
        "explicacion": "El diseño resistente permite que el software mantenga sus funciones esenciales incluso en presencia de ataques o fallos​(tema 2)."
    },
    {
        "pregunta": "¿Qué técnica se utiliza para identificar múltiples combinaciones de vulnerabilidades que un atacante podría explotar?",
        "respuestas": [
            "a) Modelado de ataques con patrones y árboles de ataque.",
            "b) Pruebas de carga para analizar el rendimiento.",
            "c) Análisis de flujo de datos en tiempo de ejecución.",
            "d) Separación de dominios entre módulos del software."
        ],
        "respuesta_correcta": "a) Modelado de ataques con patrones y árboles de ataque.",
        "explicacion": "Los patrones y árboles de ataque proporcionan una representación estructurada para analizar combinaciones de vulnerabilidades explotables​(tema 3)."
    },
    {
        "pregunta": "¿Qué ventaja tiene implementar el método DREAD en el análisis de riesgos?",
        "respuestas": [
            "a) Simplifica la documentación técnica del sistema.",
            "b) Proporciona un enfoque estructurado para priorizar amenazas.",
            "c) Reduce la necesidad de herramientas de análisis estático.",
            "d) Elimina automáticamente vulnerabilidades críticas."
        ],
        "respuesta_correcta": "b) Proporciona un enfoque estructurado para priorizar amenazas.",
        "explicacion": "DREAD permite clasificar y priorizar amenazas con base en su probabilidad e impacto, facilitando la toma de decisiones estratégicas​(tema 4)."
    },
    {
        "pregunta": "¿Por qué es importante el principio de autenticación en el software seguro?",
        "respuestas": [
            "a) Facilita la integración de funcionalidades adicionales.",
            "b) Garantiza que los usuarios sean quienes dicen ser.",
            "c) Permite el acceso no restringido a recursos compartidos.",
            "d) Simplifica el diseño general del sistema."
        ],
        "respuesta_correcta": "b) Garantiza que los usuarios sean quienes dicen ser.",
        "explicacion": "La autenticación es esencial para verificar la identidad de usuarios, previniendo accesos no autorizados y asegurando la integridad del sistema​(tema 2)."
    },
    {
        "pregunta": "¿Qué objetivo tiene el principio de fallar de forma segura en el diseño de software?",
        "respuestas": [
            "a) Permitir que el sistema continúe operando sin restricciones en caso de error.",
            "b) Garantizar que los fallos no expongan datos o recursos críticos.",
            "c) Deshabilitar automáticamente todas las funcionalidades del sistema al fallar.",
            "d) Evitar la generación de registros de eventos durante los fallos."
        ],
        "respuesta_correcta": "b) Garantizar que los fallos no expongan datos o recursos críticos.",
        "explicacion": "Fallar de forma segura asegura que los errores no comprometan la seguridad o permitan accesos no autorizados al sistema​(tema 2)."
    },
    {
        "pregunta": "¿Cuál de las siguientes opciones es una buena práctica para la validación de datos en software seguro?",
        "respuestas": [
            "a) Permitir cualquier entrada sin restricciones para maximizar la funcionalidad.",
            "b) Validar únicamente los datos sensibles para reducir el impacto en el rendimiento.",
            "c) Validar explícitamente todos los datos que entran al sistema.",
            "d) Rechazar automáticamente todas las entradas de usuario."
        ],
        "respuesta_correcta": "c) Validar explícitamente todos los datos que entran al sistema.",
        "explicacion": "La validación explícita reduce el riesgo de vulnerabilidades como inyección SQL y cross-site scripting (XSS)​(tema 5)."
    },
    {
        "pregunta": "¿Qué característica distingue al método STRIDE en el análisis de seguridad?",
        "respuestas": [
            "a) Proporciona un enfoque cuantitativo para priorizar vulnerabilidades.",
            "b) Clasifica amenazas en categorías específicas como suplantación y manipulación.",
            "c) Analiza exclusivamente el rendimiento del software bajo condiciones adversas.",
            "d) Detecta automáticamente errores de diseño en la fase de codificación."
        ],
        "respuesta_correcta": "b) Clasifica amenazas en categorías específicas como suplantación y manipulación.",
        "explicacion": "STRIDE es un marco que permite identificar diferentes tipos de amenazas específicas durante el análisis de riesgos​(tema 4)."
    },
    {
        "pregunta": "¿Qué es el análisis de flujo de control en las herramientas SAST?",
        "respuestas": [
            "a) Una técnica para identificar errores semánticos en el código.",
            "b) Un método para explorar los caminos de ejecución posibles de una función.",
            "c) Una técnica para analizar exclusivamente archivos de configuración.",
            "d) Una estrategia para mejorar el rendimiento del código compilado."
        ],
        "respuesta_correcta": "b) Un método para explorar los caminos de ejecución posibles de una función.",
        "explicacion": "El análisis de flujo de control examina cómo se ejecutan las funciones, ayudando a identificar rutas inseguras en el software​(tema 5)."
    },
    {
        "pregunta": "¿Cuál es el objetivo principal del catálogo CAPEC?",
        "respuestas": [
            "a) Enumerar métodos para proteger software contra ataques.",
            "b) Clasificar patrones de ataque utilizados por los ciberatacantes.",
            "c) Proveer herramientas de análisis estático gratuitas para desarrolladores.",
            "d) Garantizar el cumplimiento normativo en aplicaciones web."
        ],
        "respuesta_correcta": "b) Clasificar patrones de ataque utilizados por los ciberatacantes.",
        "explicacion": "CAPEC ofrece un conjunto de patrones de ataque estructurados que ayudan a comprender y mitigar métodos de explotación​(tema 3)."
    },
    {
        "pregunta": "¿Qué principio de diseño seguro establece que las configuraciones iniciales deben ser las más seguras posibles?",
        "respuestas": [
            "a) Registro de eventos de seguridad.",
            "b) Mínimo privilegio.",
            "c) Seguridad por defecto.",
            "d) Separación de privilegios."
        ],
        "respuesta_correcta": "c) Seguridad por defecto.",
        "explicacion": "Este principio asegura que las configuraciones predeterminadas limiten los riesgos de seguridad desde el inicio​(tema 2)."
    },
    {
        "pregunta": "¿Por qué son importantes los diagramas DFD en el modelado de amenazas?",
        "respuestas": [
            "a) Proveen un mapa visual del flujo de datos que ayuda a identificar vulnerabilidades.",
            "b) Incrementan la velocidad de desarrollo del software.",
            "c) Reducen la cantidad de pruebas necesarias en la fase de codificación.",
            "d) Evitan la necesidad de validación de entradas en aplicaciones críticas."
        ],
        "respuesta_correcta": "a) Proveen un mapa visual del flujo de datos que ayuda a identificar vulnerabilidades.",
        "explicacion": "Los DFD son útiles para mapear datos, flujos y puntos de interacción que podrían ser explotados​(tema 4)."
    },
    {
        "pregunta": "¿Qué técnica ayuda a minimizar las dependencias entre componentes del software?",
        "respuestas": [
            "a) Propagación de taint.",
            "b) Descomposición funcional.",
            "c) Separación de dominios.",
            "d) Análisis de flujo de datos."
        ],
        "respuesta_correcta": "c) Separación de dominios.",
        "explicacion": "Este principio separa componentes y recursos para limitar interacciones innecesarias y reducir el riesgo de fallos o ataques​(tema 2)."
    },
    {
        "pregunta": "¿Qué representa un exploit en términos de seguridad de software?",
        "respuestas": [
            "a) Un fallo menor que no compromete el sistema.",
            "b) Una instancia de un ataque que aprovecha una vulnerabilidad específica.",
            "c) Un método para cifrar datos sensibles en el software.",
            "d) Un error de diseño que afecta únicamente al rendimiento del sistema."
        ],
        "respuesta_correcta": "b) Una instancia de un ataque que aprovecha una vulnerabilidad específica.",
        "explicacion": "Los exploits son ataques que aprovechan vulnerabilidades en el software para obtener acceso o causar daño​(tema 1)."
    },
    {
        "pregunta": "¿Cuál es el propósito principal del análisis estático global?",
        "respuestas": [
            "a) Identificar defectos relacionados con interacciones entre funciones.",
            "b) Validar exclusivamente entradas de usuario en el sistema.",
            "c) Evaluar métricas de rendimiento del código en tiempo de ejecución.",
            "d) Analizar únicamente una función específica en el software."
        ],
        "respuesta_correcta": "a) Identificar defectos relacionados con interacciones entre funciones.",
        "explicacion": "El análisis estático global examina interacciones entre funciones para detectar errores que podrían no ser evidentes en análisis locales​(tema 5)."
    }
]