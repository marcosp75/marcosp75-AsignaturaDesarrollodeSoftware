
```json
[
    {
        "pregunta": "¿Cuál de las siguientes es una propiedad esencial de un software seguro?",
        "respuestas": [
            "a) Rendimiento mejorado en entornos virtuales.",
            "b) Compatibilidad con todos los sistemas operativos.",
            "c) Confidencialidad, integridad y disponibilidad.",
            "d) Capacidad de escalar horizontalmente sin restricciones."
        ],
        "respuesta_correcta": "c) Confidencialidad, integridad y disponibilidad.",
        "explicacion": "Estas son propiedades fundamentales que garantizan que el software sea confiable, protegiendo la información frente a accesos no autorizados, modificaciones no intencionadas y asegurando su disponibilidad."
    },
    {
        "pregunta": "¿Qué define la estrategia de defensa en profundidad en el diseño de software seguro?",
        "respuestas": [
            "a) Implementar una única capa de seguridad para simplificar el sistema.",
            "b) Introducir múltiples capas de seguridad para reducir el riesgo de compromisos.",
            "c) Usar solo mecanismos de seguridad en la capa de red.",
            "d) Prohibir la comunicación entre componentes internos del sistema."
        ],
        "respuesta_correcta": "b) Introducir múltiples capas de seguridad para reducir el riesgo de compromisos.",
        "explicacion": "La defensa en profundidad asegura que si una capa de seguridad falla, otras capas minimicen el impacto, protegiendo el software de ataques complejos."
    },
    {
        "pregunta": "¿Cuál es la principal ventaja de integrar seguridad en las primeras fases del ciclo de vida del software?",
        "respuestas": [
            "a) Permite reducir el tiempo total de desarrollo del software.",
            "b) Minimiza el impacto de los ataques físicos al hardware.",
            "c) Reduce los costes de corrección de errores en etapas posteriores.",
            "d) Garantiza que el software funcione en todos los sistemas operativos."
        ],
        "respuesta_correcta": "c) Reduce los costes de corrección de errores en etapas posteriores.",
        "explicacion": "Identificar y corregir problemas de seguridad en etapas tempranas del SDLC resulta menos costoso que hacerlo durante la operación del software."
    },
    {
        "pregunta": "¿Qué principio de diseño fomenta que los usuarios, procesos o dispositivos solo tengan los permisos estrictamente necesarios?",
        "respuestas": [
            "a) Simplicidad del diseño.",
            "b) Mínimo privilegio.",
            "c) Separación de dominios.",
            "d) Registro de eventos de seguridad."
        ],
        "respuesta_correcta": "b) Mínimo privilegio.",
        "explicacion": "Este principio busca minimizar los riesgos al restringir los privilegios a lo absolutamente necesario para realizar una tarea."
    },
    {
        "pregunta": "¿Qué describe mejor un caso de abuso en la ingeniería de requisitos de software?",
        "respuestas": [
            "a) Una función adicional que mejora la seguridad del software.",
            "b) Un evento que genera un impacto positivo en la organización.",
            "c) Una función que el sistema no debe permitir para evitar pérdidas.",
            "d) Un requisito funcional de alto impacto en la experiencia del usuario."
        ],
        "respuesta_correcta": "c) Una función que el sistema no debe permitir para evitar pérdidas.",
        "explicacion": "Los casos de abuso se utilizan para identificar amenazas y diseñar restricciones que eviten el mal uso del sistema."
    },
    {
        "pregunta": "¿Cuál es el objetivo del análisis estático de código (SAST)?",
        "respuestas": [
            "a) Detectar vulnerabilidades al ejecutar el software en un entorno controlado.",
            "b) Identificar vulnerabilidades en el código fuente antes de que el software sea ejecutado.",
            "c) Mejorar la velocidad del software eliminando redundancias.",
            "d) Crear análisis dinámicos para identificar problemas en tiempo de ejecución."
        ],
        "respuesta_correcta": "b) Identificar vulnerabilidades en el código fuente antes de que el software sea ejecutado.",
        "explicacion": "El análisis estático permite detectar problemas en fases tempranas del desarrollo, mejorando la seguridad y reduciendo costos."
    },
    {
        "pregunta": "¿Qué herramienta es clave para evaluar amenazas durante la fase de diseño de software seguro?",
        "respuestas": [
            "a) OWASP Top 10.",
            "b) Modelado de amenazas.",
            "c) Pruebas de penetración.",
            "d) Gestión de la cadena de suministro."
        ],
        "respuesta_correcta": "b) Modelado de amenazas.",
        "explicacion": "El modelado de amenazas identifica riesgos potenciales y planifica contramedidas durante la fase de diseño, siendo esencial para el S-SDLC."
    },
    {
        "pregunta": "¿Qué técnica ayuda a prevenir la manipulación de datos en aplicaciones web?",
        "respuestas": [
            "a) Separación de dominios.",
            "b) Validación de datos explícita.",
            "c) Registro de eventos de seguridad.",
            "d) Uso de entornos de ejecución inseguros."
        ],
        "respuesta_correcta": "b) Validación de datos explícita.",
        "explicacion": "Validar los datos explícitamente reduce la probabilidad de ataques como inyección de código o cross-site scripting."
    },
    {
        "pregunta": "¿Qué describe el método STRIDE utilizado en seguridad de software?",
        "respuestas": [
            "a) Una clasificación de defectos de codificación.",
            "b) Un modelo para identificar y clasificar amenazas.",
            "c) Una técnica para cifrar datos sensibles.",
            "d) Un estándar para evaluar la criticidad de vulnerabilidades."
        ],
        "respuesta_correcta": "b) Un modelo para identificar y clasificar amenazas.",
        "explicacion": "STRIDE categoriza amenazas en suplantación, manipulación, repudio, divulgación de información, denegación de servicio y escalamiento de privilegios."
    },
    {
        "pregunta": "¿Cuál es el propósito del análisis de composición del software (SCA)?",
        "respuestas": [
            "a) Identificar componentes de terceros y sus vulnerabilidades conocidas.",
            "b) Mejorar el rendimiento del software durante pruebas de carga.",
            "c) Clasificar errores semánticos en el código fuente.",
            "d) Probar el software en diferentes sistemas operativos."
        ],
        "respuesta_correcta": "a) Identificar componentes de terceros y sus vulnerabilidades conocidas.",
        "explicacion": "SCA evalúa los componentes utilizados en el software para garantizar que no contengan vulnerabilidades críticas."
    },
    {
        "pregunta": "¿Cuál es el enfoque principal del modelado de ataques en la seguridad de software?",
        "respuestas": [
            "a) Probar componentes del software en un entorno seguro.",
            "b) Diseñar escenarios positivos que mejoren la funcionalidad del software.",
            "c) Identificar vulnerabilidades explotables y diseñar contramedidas.",
            "d) Garantizar que los usuarios finales comprendan las políticas de seguridad."
        ],
        "respuesta_correcta": "c) Identificar vulnerabilidades explotables y diseñar contramedidas.",
        "explicacion": "El modelado de ataques analiza la perspectiva del atacante para identificar posibles puntos de explotación y desarrollar respuestas defensivas efectivas."
    },
    {
        "pregunta": "¿Qué propiedad del software seguro asegura que solo las entidades autorizadas puedan acceder a la información?",
        "respuestas": [
            "a) Disponibilidad.",
            "b) Confidencialidad.",
            "c) Integridad.",
            "d) Fiabilidad."
        ],
        "respuesta_correcta": "b) Confidencialidad.",
        "explicacion": "La confidencialidad garantiza que los datos estén protegidos frente a accesos no autorizados, manteniéndolos seguros y privados."
    },
    {
        "pregunta": "¿Qué objetivo persigue la separación de dominios en el diseño seguro del software?",
        "respuestas": [
            "a) Permitir que las entidades interactúen libremente para maximizar la funcionalidad.",
            "b) Minimizar la probabilidad de acceso no autorizado a datos o memoria del sistema.",
            "c) Reducir el tamaño del software para mejorar el rendimiento.",
            "d) Unificar los privilegios de todos los usuarios en un solo dominio."
        ],
        "respuesta_correcta": "b) Minimizar la probabilidad de acceso no autorizado a datos o memoria del sistema.",
        "explicacion": "La separación de dominios aísla recursos críticos en áreas seguras, limitando el acceso a entidades confiables."
    },
    {
        "pregunta": "¿Cuál de los siguientes es un beneficio clave de implementar un S-SDLC?",
        "respuestas": [
            "a) Aumentar el número de funcionalidades del software.",
            "b) Garantizar el cumplimiento exclusivo de estándares legales.",
            "c) Detectar errores de seguridad en etapas tempranas y reducir costos.",
            "d) Reducir el tiempo total de desarrollo del software."
        ],
        "respuesta_correcta": "c) Detectar errores de seguridad en etapas tempranas y reducir costos.",
        "explicacion": "Un S-SDLC permite identificar problemas desde las primeras etapas del ciclo de vida del software, reduciendo tanto riesgos como costos asociados."
    },
    {
        "pregunta": "¿Qué vulnerabilidad podría resultar de no validar los datos de entrada del usuario?",
        "respuestas": [
            "a) Cross-site scripting (XSS).",
            "b) Desbordamiento de búfer.",
            "c) Inyección SQL.",
            "d) Todas las anteriores."
        ],
        "respuesta_correcta": "d) Todas las anteriores.",
        "explicacion": "La falta de validación de entradas puede llevar a vulnerabilidades graves como XSS, inyección SQL y desbordamientos de búfer."
    },
    {
        "pregunta": "¿Qué principio de diseño se aplica cuando se limita el acceso a recursos basándose en roles?",
        "respuestas": [
            "a) Seguridad por defecto.",
            "b) Mínimo privilegio.",
            "c) Separación de privilegios.",
            "d) Diseño de software resistente."
        ],
        "respuesta_correcta": "c) Separación de privilegios.",
        "explicacion": "Este principio asegura que las entidades tengan acceso únicamente a los recursos necesarios para cumplir sus funciones específicas, basado en roles definidos."
    },
    {
        "pregunta": "¿Por qué las herramientas SAST son críticas en la fase de codificación?",
        "respuestas": [
            "a) Evaluan el impacto de los ciberataques una vez el software está en producción.",
            "b) Detectan vulnerabilidades en el código fuente antes de que el software sea ejecutado.",
            "c) Analizan los requisitos de seguridad del software antes de su diseño.",
            "d) Ayudan a documentar los errores encontrados durante pruebas dinámicas."
        ],
        "respuesta_correcta": "b) Detectan vulnerabilidades en el código fuente antes de que el software sea ejecutado.",
        "explicacion": "Las herramientas SAST identifican errores de seguridad en etapas tempranas, mejorando la eficiencia del desarrollo seguro."
    },
    {
        "pregunta": "¿Qué técnica se utiliza para analizar cómo los datos se mueven a través de un programa?",
        "respuestas": [
            "a) Análisis de flujo de datos.",
            "b) Modelado de ataques.",
            "c) Registro de eventos de seguridad.",
            "d) Separación de dominios."
        ],
        "respuesta_correcta": "a) Análisis de flujo de datos.",
        "explicacion": "El análisis de flujo de datos examina el recorrido de los datos para identificar posibles vulnerabilidades relacionadas con su manipulación y almacenamiento."
    },
    {
        "pregunta": "¿Cuál es el propósito del método DREAD en el modelado de amenazas?",
        "respuestas": [
            "a) Clasificar vulnerabilidades conocidas en componentes de código abierto.",
            "b) Priorizar amenazas basándose en su probabilidad e impacto.",
            "c) Diseñar patrones de ataque para pruebas de seguridad.",
            "d) Implementar soluciones criptográficas en el software."
        ],
        "respuesta_correcta": "b) Priorizar amenazas basándose en su probabilidad e impacto.",
        "explicacion": "DREAD evalúa el impacto y la probabilidad de una amenaza para determinar las medidas necesarias para mitigarla."
    },
    {
        "pregunta": "¿Qué técnica se utiliza para representar gráficamente las vulnerabilidades explotables de un sistema?",
        "respuestas": [
            "a) Modelado de amenazas.",
            "b) Árboles de ataque.",
            "c) Patrones de diseño.",
            "d) Análisis de flujo de control."
        ],
        "respuesta_correcta": "b) Árboles de ataque.",
        "explicacion": "Los árboles de ataque identifican objetivos potenciales y las rutas que un atacante podría seguir para alcanzarlos, ayudando a diseñar defensas efectivas."
    },
    {
        "pregunta": "¿Cuál es el principal objetivo del análisis de riesgos arquitectónico?",
        "respuestas": [
            "a) Documentar todos los componentes del software para auditorías externas.",
            "b) Especificar los activos, amenazas y salvaguardas concretas del sistema.",
            "c) Aumentar la velocidad de desarrollo del software.",
            "d) Eliminar todos los defectos funcionales del código fuente."
        ],
        "respuesta_correcta": "b) Especificar los activos, amenazas y salvaguardas concretas del sistema.",
        "explicacion": "Este análisis identifica los activos y evalúa los riesgos asociados al diseño del software, definiendo salvaguardas específicas para mitigarlos."
    },
    {
        "pregunta": "¿Qué vulnerabilidad puede ocurrir si un atacante logra manipular las entradas de datos?",
        "respuestas": [
            "a) Suplantación de identidad.",
            "b) Denegación de servicio.",
            "c) Inyección de código.",
            "d) Todas las anteriores."
        ],
        "respuesta_correcta": "d) Todas las anteriores.",
        "explicacion": "La manipulación de entradas puede derivar en diversas vulnerabilidades, como suplantación de identidad, inyección de código o denegación de servicio."
    },
    {
        "pregunta": "¿Qué es STRIDE?",
        "respuestas": [
            "a) Un método para diseñar software resistente.",
            "b) Una técnica para clasificar amenazas de seguridad.",
            "c) Un estándar para verificar la seguridad del código.",
            "d) Una metodología para evaluar riesgos financieros."
        ],
        "respuesta_correcta": "b) Una técnica para clasificar amenazas de seguridad.",
        "explicacion": "STRIDE categoriza amenazas en suplantación, manipulación, repudio, divulgación de información, denegación de servicio y escalamiento de privilegios."
    },
    {
        "pregunta": "¿Cuál es la función principal de los patrones de ataque?",
        "respuestas": [
            "a) Mejorar la usabilidad del software para usuarios finales.",
            "b) Identificar técnicas comunes utilizadas por los atacantes.",
            "c) Clasificar datos sensibles según su importancia.",
            "d) Diseñar algoritmos de encriptación avanzados."
        ],
        "respuesta_correcta": "b) Identificar técnicas comunes utilizadas por los atacantes.",
        "explicacion": "Los patrones de ataque ayudan a capturar el conocimiento del atacante, proporcionando una base para mitigar las vulnerabilidades."
    },
    {
        "pregunta": "¿Qué característica define a un software seguro?",
        "respuestas": [
            "a) Carece de cualquier funcionalidad no documentada.",
            "b) Está protegido contra vulnerabilidades intencionales y no intencionales.",
            "c) Funciona exclusivamente en entornos controlados.",
            "d) No requiere mantenimiento tras su implementación."
        ],
        "respuesta_correcta": "b) Está protegido contra vulnerabilidades intencionales y no intencionales.",
        "explicacion": "El software seguro asegura su confiabilidad al prevenir y mitigar vulnerabilidades durante todo su ciclo de vida."
    },
    {
        "pregunta": "¿Cuál de las siguientes es una debilidad común en el diseño de software?",
        "respuestas": [
            "a) Uso de interfaces gráficas avanzadas.",
            "b) Dependencia de configuraciones por defecto inseguras.",
            "c) Inclusión de múltiples capas de seguridad.",
            "d) Implementación de pruebas dinámicas en etapas tempranas."
        ],
        "respuesta_correcta": "b) Dependencia de configuraciones por defecto inseguras.",
        "explicacion": "Las configuraciones por defecto suelen ser inseguras y pueden permitir a los atacantes explotar fácilmente el software."
    },
    {
        "pregunta": "¿Por qué es importante realizar la descomposición de la aplicación en el modelado de amenazas?",
        "respuestas": [
            "a) Para reducir la cantidad de código utilizado en el proyecto.",
            "b) Para identificar puntos vulnerables como flujos de datos y entidades externas.",
            "c) Para eliminar requisitos de seguridad redundantes.",
            "d) Para simplificar el diseño gráfico de la aplicación."
        ],
        "respuesta_correcta": "b) Para identificar puntos vulnerables como flujos de datos y entidades externas.",
        "explicacion": "La descomposición permite mapear elementos clave de la aplicación, identificando puntos susceptibles a amenazas."
    },
    {
        "pregunta": "¿Qué ventaja proporciona la simplicidad del diseño en la seguridad del software?",
        "respuestas": [
            "a) Incrementa la velocidad de desarrollo.",
            "b) Reduce la probabilidad de introducir vulnerabilidades.",
            "c) Facilita la implementación de funcionalidades adicionales.",
            "d) Permite el acceso universal a los datos del sistema."
        ],
        "respuesta_correcta": "b) Reduce la probabilidad de introducir vulnerabilidades.",
        "explicacion": "Diseños simples disminuyen los errores de programación y debilidades, mejorando la seguridad del software."
    },
    {
        "pregunta": "¿Qué técnica del análisis estático ayuda a identificar desbordamientos de búfer?",
        "respuestas": [
            "a) Validación de entradas.",
            "b) Análisis estructural.",
            "c) Análisis de flujo de datos.",
            "d) Propagación de taint."
        ],
        "respuesta_correcta": "d) Propagación de taint.",
        "explicacion": "Esta técnica rastrea cómo las entradas no confiables se propagan a través del programa, detectando defectos como desbordamientos de búfer."
    },
    {
        "pregunta":
